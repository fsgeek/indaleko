'''
This module defines the database schema for any database record conforming to
the Indaleko Record requirements.

Project Indaleko
Copyright (C) 2024 Tony Mason

This program is free software: you can redistribute it and/or modify
it under the terms of the GNU Affero General Public License as published
by the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU Affero General Public License for more details.

You should have received a copy of the GNU Affero General Public License
along with this program.  If not, see <https://www.gnu.org/licenses/>.
'''
import json
import apischema
from graphql import print_schema
from uuid import UUID
from typing import Annotated
from dataclasses import dataclass
from apischema.graphql import graphql_schema
from apischema.json_schema import serialization_schema, deserialization_schema

from IndalekoRecordDataModel import IndalekoRecordDataModel

class IndalekoServiceDataModel:
    '''This is the data model for the Indaleko Services type.'''

    @dataclass
    class IndalekoService:
        '''This is the data model for the Indaleko Service type.'''
        Record : IndalekoRecordDataModel.IndalekoRecord

        Identifier : Annotated[
            UUID,
            apischema.schema(description="This is the UUID of the service provider", format="uuid")
        ]


        Version : Annotated[
            str,
            apischema.schema(description="This is the version of the source provider. Versioning allows evolution of the data generated by the source."),
            apischema.metadata.required
        ]

        Name : Annotated[
            str,
            apischema.schema(description="This is the name of the source provider."),
            apischema.metadata.required
        ]

        Type : Annotated [
            str,
            apischema.schema(description="This is the type of service provider."),
            apischema.metadata.required
        ]

        Description : Annotated[
            str,
            apischema.schema(description="This is the description of the service provider."),
            apischema.metadata.required
        ]

        @staticmethod
        def deserialize(data : dict) -> 'IndalekoServiceDataModel.IndalekoService':
            '''Deserialize the data into an IndalekoService object.'''
            return apischema.deserialize(IndalekoServiceDataModel.IndalekoService,
                                             data,
                                             additional_properties=True)

        @staticmethod
        def serialize(service : 'IndalekoServiceDataModel.IndalekoService') -> dict:
            '''Serialize the IndalekoService object into a dict.'''
            candidate = apischema.serialize(IndalekoServiceDataModel.IndalekoService,
                                       service,
                                       additional_properties=True,
                                       exclude_unset=True,
                                       exclude_none=True)
            return candidate

    @staticmethod
    def get_service(service_identifier : UUID) -> 'IndalekoServiceDataModel.IndalekoService':
        '''Return an IndalekoService object.'''
        service = IndalekoServiceDataModel.IndalekoService(
            Record = None,
            Identifier = service_identifier,
            Version = '1.0.0',
            Name = 'Test Service',
            Type = 'Test',
            Description = 'Test Service Description'
        )
        return service

    @staticmethod
    def get_queries() -> list :
        '''Return the queries for the IndalekoServicesDataModel.'''
        return [IndalekoServiceDataModel.get_service]


    @staticmethod
    def get_types() -> list:
        '''Return the types for the IndalekoServicesDataModel.'''
        return [IndalekoServiceDataModel.IndalekoService]

def main():
    '''Test the IndalekoServicesDataModel.'''
    print('GraphQL Schema:')
    print(print_schema(graphql_schema(
        query=[IndalekoServiceDataModel.get_service],
        types=[IndalekoServiceDataModel.IndalekoService])))
    print('Deserialization Schema:')
    print(json.dumps(deserialization_schema(IndalekoServiceDataModel.IndalekoService, additional_properties=True), indent=4))
    print('Serialization Schema:')
    print(json.dumps(serialization_schema(IndalekoServiceDataModel.IndalekoService, additional_properties=True), indent=4))

if __name__ == '__main__':  # pragma: no cover
    main()
