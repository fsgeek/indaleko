@echo off
setlocal enabledelayedexpansion

rem Set the path to the Indaleko root directory
set "SCRIPT_DIR=%~dp0"
set "INDALEKO_ROOT=%SCRIPT_DIR%..\..\"

echo Running cloud storage activity generator tests from: %SCRIPT_DIR%
echo Indaleko root directory: %INDALEKO_ROOT%

rem Activate the virtual environment if it exists
if exist "%INDALEKO_ROOT%\.venv-win32-python3.12\Scripts\activate.bat" (
    call "%INDALEKO_ROOT%\.venv-win32-python3.12\Scripts\activate.bat"
    echo Activated Windows Python 3.12 virtual environment
) else if exist "%INDALEKO_ROOT%\.venv-win32-python3.11\Scripts\activate.bat" (
    call "%INDALEKO_ROOT%\.venv-win32-python3.11\Scripts\activate.bat"
    echo Activated Windows Python 3.11 virtual environment
) else (
    echo No virtual environment found. Using system Python
)

rem Add the Indaleko root to PYTHONPATH
set "PYTHONPATH=%INDALEKO_ROOT%;%PYTHONPATH%"

rem Run the cloud storage generator unit tests
echo Running cloud storage generator unit tests...
python -m tools.data_generator_enhanced.testing.test_cloud_storage_generator

rem Store the exit status to be returned at the end
set UNIT_TEST_RESULT=%ERRORLEVEL%

rem Check if -db flag is provided
set RUN_DB_TESTS=0
for %%a in (%*) do (
    if "%%a"=="-db" (
        set RUN_DB_TESTS=1
    )
)

if !RUN_DB_TESTS!==1 (
    echo.
    echo Running database integration tests with cloud storage activities...
    
    rem Create a temporary file for the DB integration test script
    set "TEMP_SCRIPT=%TEMP%\cloud_storage_db_test_%RANDOM%.py"
    
    rem Write the python test script to the temporary file
    echo """                                                                               > "!TEMP_SCRIPT!"
    echo Database integration test for cloud storage activity generator.                  >> "!TEMP_SCRIPT!"
    echo.                                                                                 >> "!TEMP_SCRIPT!"
    echo Tests the complete roundtrip flow:                                               >> "!TEMP_SCRIPT!"
    echo 1. Generate cloud storage activities with semantic attributes                    >> "!TEMP_SCRIPT!"
    echo 2. Upload the data to ArangoDB                                                   >> "!TEMP_SCRIPT!"
    echo 3. Execute real AQL queries against the uploaded data                            >> "!TEMP_SCRIPT!"
    echo 4. Verify query results match expected outputs                                   >> "!TEMP_SCRIPT!"
    echo """                                                                              >> "!TEMP_SCRIPT!"
    echo.                                                                                 >> "!TEMP_SCRIPT!"
    echo import os                                                                        >> "!TEMP_SCRIPT!"
    echo import sys                                                                       >> "!TEMP_SCRIPT!"
    echo import uuid                                                                      >> "!TEMP_SCRIPT!"
    echo import json                                                                      >> "!TEMP_SCRIPT!"
    echo import logging                                                                   >> "!TEMP_SCRIPT!"
    echo import argparse                                                                  >> "!TEMP_SCRIPT!"
    echo import datetime                                                                  >> "!TEMP_SCRIPT!"
    echo import time                                                                      >> "!TEMP_SCRIPT!"
    echo import random                                                                    >> "!TEMP_SCRIPT!"
    echo from typing import Dict, List, Any, Tuple                                        >> "!TEMP_SCRIPT!"
    echo.                                                                                 >> "!TEMP_SCRIPT!"
    echo # Setup path for imports                                                         >> "!TEMP_SCRIPT!"
    echo if os.environ.get("INDALEKO_ROOT") is None:                                      >> "!TEMP_SCRIPT!"
    echo     current_path = os.path.dirname(os.path.abspath(__file__))                   >> "!TEMP_SCRIPT!"
    echo     while not os.path.exists(os.path.join(current_path, "Indaleko.py")):        >> "!TEMP_SCRIPT!"
    echo         current_path = os.path.dirname(current_path)                            >> "!TEMP_SCRIPT!"
    echo     os.environ["INDALEKO_ROOT"] = current_path                                   >> "!TEMP_SCRIPT!"
    echo     sys.path.append(current_path)                                               >> "!TEMP_SCRIPT!"
    echo.                                                                                 >> "!TEMP_SCRIPT!"
    echo # Import Indaleko database modules                                               >> "!TEMP_SCRIPT!"
    echo from db.db_config import IndalekoDBConfig                                        >> "!TEMP_SCRIPT!"
    echo from db.db_collections import IndalekoDBCollections                              >> "!TEMP_SCRIPT!"
    echo.                                                                                 >> "!TEMP_SCRIPT!"
    echo # Import data generator components                                               >> "!TEMP_SCRIPT!"
    echo from tools.data_generator_enhanced.agents.data_gen.tools.cloud_storage_generator import ( >> "!TEMP_SCRIPT!"
    echo     CloudStorageActivityGeneratorTool,                                           >> "!TEMP_SCRIPT!"
    echo     StorageActivityType,                                                         >> "!TEMP_SCRIPT!"
    echo     StorageItemType,                                                             >> "!TEMP_SCRIPT!"
    echo     StorageProviderType                                                          >> "!TEMP_SCRIPT!"
    echo )                                                                                >> "!TEMP_SCRIPT!"
    echo.                                                                                 >> "!TEMP_SCRIPT!"
    echo # Custom JSON encoder for complex types                                          >> "!TEMP_SCRIPT!"
    echo class CustomJSONEncoder(json.JSONEncoder):                                       >> "!TEMP_SCRIPT!"
    echo     def default(self, obj):                                                      >> "!TEMP_SCRIPT!"
    echo         if isinstance(obj, uuid.UUID):                                           >> "!TEMP_SCRIPT!"
    echo             return str(obj)                                                      >> "!TEMP_SCRIPT!"
    echo         if isinstance(obj, datetime.datetime):                                   >> "!TEMP_SCRIPT!"
    echo             return obj.isoformat()                                              >> "!TEMP_SCRIPT!"
    echo         return super().default(obj)                                              >> "!TEMP_SCRIPT!"
    echo.                                                                                 >> "!TEMP_SCRIPT!"
    echo def convert_to_json_serializable(obj):                                           >> "!TEMP_SCRIPT!"
    echo     """Convert an object with UUIDs and datetimes to JSON serializable format.""" >> "!TEMP_SCRIPT!"
    echo     if isinstance(obj, dict):                                                    >> "!TEMP_SCRIPT!"
    echo         result = {}                                                              >> "!TEMP_SCRIPT!"
    echo         for k, v in obj.items():                                                 >> "!TEMP_SCRIPT!"
    echo             result[k] = convert_to_json_serializable(v)                          >> "!TEMP_SCRIPT!"
    echo         return result                                                            >> "!TEMP_SCRIPT!"
    echo     elif isinstance(obj, list):                                                  >> "!TEMP_SCRIPT!"
    echo         return [convert_to_json_serializable(item) for item in obj]             >> "!TEMP_SCRIPT!"
    echo     elif isinstance(obj, uuid.UUID):                                             >> "!TEMP_SCRIPT!"
    echo         return str(obj)                                                          >> "!TEMP_SCRIPT!"
    echo     elif isinstance(obj, datetime.datetime):                                     >> "!TEMP_SCRIPT!"
    echo         return obj.isoformat()                                                  >> "!TEMP_SCRIPT!"
    echo     else:                                                                        >> "!TEMP_SCRIPT!"
    echo         return obj                                                               >> "!TEMP_SCRIPT!"
    echo.                                                                                 >> "!TEMP_SCRIPT!"
    echo def main():                                                                      >> "!TEMP_SCRIPT!"
    echo     """Run the cloud storage database integration test."""                       >> "!TEMP_SCRIPT!"
    echo     # Setup logging                                                              >> "!TEMP_SCRIPT!"
    echo     logging.basicConfig(                                                         >> "!TEMP_SCRIPT!"
    echo         level=logging.INFO,                                                      >> "!TEMP_SCRIPT!"
    echo         format="%(asctime)s - %(name)s - %(levelname)s - %(message)s",          >> "!TEMP_SCRIPT!"
    echo         handlers=[logging.StreamHandler()]                                       >> "!TEMP_SCRIPT!"
    echo     )                                                                            >> "!TEMP_SCRIPT!"
    echo     logger = logging.getLogger("CloudStorageDBTest")                             >> "!TEMP_SCRIPT!"
    echo.                                                                                 >> "!TEMP_SCRIPT!"
    echo     try:                                                                         >> "!TEMP_SCRIPT!"
    echo         # Connect to database                                                    >> "!TEMP_SCRIPT!"
    echo         logger.info("Connecting to database...")                                 >> "!TEMP_SCRIPT!"
    echo         db_config = IndalekoDBConfig(start=True)                                 >> "!TEMP_SCRIPT!"
    echo         db = db_config.get_arangodb()                                            >> "!TEMP_SCRIPT!"
    echo         logger.info(f"Connected to ArangoDB: {db.properties()}")                 >> "!TEMP_SCRIPT!"
    echo.                                                                                 >> "!TEMP_SCRIPT!"
    echo         # Generate cloud storage activities                                      >> "!TEMP_SCRIPT!"
    echo         logger.info("Generating cloud storage activities...")                    >> "!TEMP_SCRIPT!"
    echo         generator = CloudStorageActivityGeneratorTool()                          >> "!TEMP_SCRIPT!"
    echo         now = datetime.datetime.now(datetime.timezone.utc)                       >> "!TEMP_SCRIPT!"
    echo         start_time = now - datetime.timedelta(days=30)                           >> "!TEMP_SCRIPT!"
    echo         end_time = now                                                           >> "!TEMP_SCRIPT!"
    echo.                                                                                 >> "!TEMP_SCRIPT!"
    echo         # Generate activities for Google Drive                                   >> "!TEMP_SCRIPT!"
    echo         gdrive_result = generator.execute({                                      >> "!TEMP_SCRIPT!"
    echo             "count": 20,                                                         >> "!TEMP_SCRIPT!"
    echo             "criteria": {                                                        >> "!TEMP_SCRIPT!"
    echo                 "user_email": "test.user@example.com",                           >> "!TEMP_SCRIPT!"
    echo                 "provider_type": StorageProviderType.GOOGLE_DRIVE,               >> "!TEMP_SCRIPT!"
    echo                 "start_time": start_time,                                        >> "!TEMP_SCRIPT!"
    echo                 "end_time": end_time                                             >> "!TEMP_SCRIPT!"
    echo             }                                                                    >> "!TEMP_SCRIPT!"
    echo         })                                                                       >> "!TEMP_SCRIPT!"
    echo.                                                                                 >> "!TEMP_SCRIPT!"
    echo         # Generate activities for Dropbox                                        >> "!TEMP_SCRIPT!"
    echo         dropbox_result = generator.execute({                                     >> "!TEMP_SCRIPT!"
    echo             "count": 20,                                                         >> "!TEMP_SCRIPT!"
    echo             "criteria": {                                                        >> "!TEMP_SCRIPT!"
    echo                 "user_email": "test.user@example.com",                           >> "!TEMP_SCRIPT!"
    echo                 "provider_type": StorageProviderType.DROPBOX,                    >> "!TEMP_SCRIPT!"
    echo                 "start_time": start_time,                                        >> "!TEMP_SCRIPT!"
    echo                 "end_time": end_time                                             >> "!TEMP_SCRIPT!"
    echo             }                                                                    >> "!TEMP_SCRIPT!"
    echo         })                                                                       >> "!TEMP_SCRIPT!"
    echo.                                                                                 >> "!TEMP_SCRIPT!"
    echo         # Combine all activities                                                 >> "!TEMP_SCRIPT!"
    echo         all_activities = gdrive_result["activities"] + dropbox_result["activities"] >> "!TEMP_SCRIPT!"
    echo         logger.info(f"Generated {len(all_activities)} cloud storage activities") >> "!TEMP_SCRIPT!"
    echo.                                                                                 >> "!TEMP_SCRIPT!"
    echo         # Check for storage activities collection                                >> "!TEMP_SCRIPT!"
    echo         collection_name = "CloudStorageActivities"                               >> "!TEMP_SCRIPT!"
    echo         if not db.has_collection(collection_name):                               >> "!TEMP_SCRIPT!"
    echo             logger.info(f"Creating collection: {collection_name}")               >> "!TEMP_SCRIPT!"
    echo             db.create_collection(collection_name)                                >> "!TEMP_SCRIPT!"
    echo.                                                                                 >> "!TEMP_SCRIPT!"
    echo         collection = db.collection(collection_name)                              >> "!TEMP_SCRIPT!"
    echo.                                                                                 >> "!TEMP_SCRIPT!"
    echo         # Upload activities to database                                          >> "!TEMP_SCRIPT!"
    echo         logger.info(f"Uploading {len(all_activities)} activities to database...") >> "!TEMP_SCRIPT!"
    echo.                                                                                 >> "!TEMP_SCRIPT!"
    echo         # Convert activities to JSON serializable format                         >> "!TEMP_SCRIPT!"
    echo         serializable_activities = []                                             >> "!TEMP_SCRIPT!"
    echo         for activity in all_activities:                                          >> "!TEMP_SCRIPT!"
    echo             serializable_activities.append(convert_to_json_serializable(activity)) >> "!TEMP_SCRIPT!"
    echo.                                                                                 >> "!TEMP_SCRIPT!"
    echo         # Upload in batches                                                      >> "!TEMP_SCRIPT!"
    echo         batch_size = 10                                                          >> "!TEMP_SCRIPT!"
    echo         for i in range(0, len(serializable_activities), batch_size):             >> "!TEMP_SCRIPT!"
    echo             batch = serializable_activities[i:i+batch_size]                      >> "!TEMP_SCRIPT!"
    echo             collection.import_bulk(batch)                                        >> "!TEMP_SCRIPT!"
    echo.                                                                                 >> "!TEMP_SCRIPT!"
    echo         logger.info("Activities uploaded successfully")                          >> "!TEMP_SCRIPT!"
    echo.                                                                                 >> "!TEMP_SCRIPT!"
    echo         # Run test queries                                                       >> "!TEMP_SCRIPT!"
    echo         logger.info("Running test queries...")                                   >> "!TEMP_SCRIPT!"
    echo.                                                                                 >> "!TEMP_SCRIPT!"
    echo         # 1. Basic query - find activities by provider type                      >> "!TEMP_SCRIPT!"
    echo         for provider in [StorageProviderType.GOOGLE_DRIVE, StorageProviderType.DROPBOX]: >> "!TEMP_SCRIPT!"
    echo             logger.info(f"Testing query for provider type: {provider}")          >> "!TEMP_SCRIPT!"
    echo.                                                                                 >> "!TEMP_SCRIPT!"
    echo             aql_query = f"""                                                     >> "!TEMP_SCRIPT!"
    echo             FOR doc IN {collection_name}                                          >> "!TEMP_SCRIPT!"
    echo                 FILTER doc.provider_type == @provider                             >> "!TEMP_SCRIPT!"
    echo                 RETURN doc                                                        >> "!TEMP_SCRIPT!"
    echo             """                                                                  >> "!TEMP_SCRIPT!"
    echo.                                                                                 >> "!TEMP_SCRIPT!"
    echo             cursor = db.aql.execute(                                             >> "!TEMP_SCRIPT!"
    echo                 aql_query,                                                        >> "!TEMP_SCRIPT!"
    echo                 bind_vars={"provider": provider}                                  >> "!TEMP_SCRIPT!"
    echo             )                                                                    >> "!TEMP_SCRIPT!"
    echo             results = list(cursor)                                               >> "!TEMP_SCRIPT!"
    echo.                                                                                 >> "!TEMP_SCRIPT!"
    echo             logger.info(f"Found {len(results)} activities for provider '{provider}'") >> "!TEMP_SCRIPT!"
    echo             if len(results) > 0:                                                 >> "!TEMP_SCRIPT!"
    echo                 logger.info(f"Provider type query successful for {provider}")    >> "!TEMP_SCRIPT!"
    echo             else:                                                                >> "!TEMP_SCRIPT!"
    echo                 logger.warning(f"Provider type query failed for {provider} - no results found") >> "!TEMP_SCRIPT!"
    echo.                                                                                 >> "!TEMP_SCRIPT!"
    echo         # 2. Semantic attribute query - find activities with specific semantic attributes >> "!TEMP_SCRIPT!"
    echo         if all_activities:                                                       >> "!TEMP_SCRIPT!"
    echo             # Find an activity with semantic attributes                          >> "!TEMP_SCRIPT!"
    echo             test_activity = None                                                 >> "!TEMP_SCRIPT!"
    echo             for activity in all_activities:                                      >> "!TEMP_SCRIPT!"
    echo                 if "SemanticAttributes" in activity and activity["SemanticAttributes"]: >> "!TEMP_SCRIPT!"
    echo                     test_activity = activity                                     >> "!TEMP_SCRIPT!"
    echo                     break                                                        >> "!TEMP_SCRIPT!"
    echo.                                                                                 >> "!TEMP_SCRIPT!"
    echo             if test_activity:                                                    >> "!TEMP_SCRIPT!"
    echo                 # Get a semantic attribute to query                              >> "!TEMP_SCRIPT!"
    echo                 test_attr = test_activity["SemanticAttributes"][0]               >> "!TEMP_SCRIPT!"
    echo                 attr_id = test_attr.get("Identifier", {}).get("Identifier")      >> "!TEMP_SCRIPT!"
    echo                 attr_value = test_attr.get("Value")                              >> "!TEMP_SCRIPT!"
    echo.                                                                                 >> "!TEMP_SCRIPT!"
    echo                 if attr_id and attr_value:                                       >> "!TEMP_SCRIPT!"
    echo                     logger.info(f"Testing query for semantic attribute: {attr_id}={attr_value}") >> "!TEMP_SCRIPT!"
    echo.                                                                                 >> "!TEMP_SCRIPT!"
    echo                     aql_query = f"""                                              >> "!TEMP_SCRIPT!"
    echo                     FOR doc IN {collection_name}                                  >> "!TEMP_SCRIPT!"
    echo                         FOR attr IN doc.SemanticAttributes                         >> "!TEMP_SCRIPT!"
    echo                             FILTER attr.Identifier.Identifier == @attr_id         >> "!TEMP_SCRIPT!"
    echo                             AND attr.Value == @attr_value                          >> "!TEMP_SCRIPT!"
    echo                             RETURN doc                                             >> "!TEMP_SCRIPT!"
    echo                     """                                                           >> "!TEMP_SCRIPT!"
    echo.                                                                                 >> "!TEMP_SCRIPT!"
    echo                     cursor = db.aql.execute(                                     >> "!TEMP_SCRIPT!"
    echo                         aql_query,                                                >> "!TEMP_SCRIPT!"
    echo                         bind_vars={                                               >> "!TEMP_SCRIPT!"
    echo                             "attr_id": attr_id,                                   >> "!TEMP_SCRIPT!"
    echo                             "attr_value": attr_value                              >> "!TEMP_SCRIPT!"
    echo                         }                                                         >> "!TEMP_SCRIPT!"
    echo                     )                                                            >> "!TEMP_SCRIPT!"
    echo                     results = list(cursor)                                       >> "!TEMP_SCRIPT!"
    echo.                                                                                 >> "!TEMP_SCRIPT!"
    echo                     logger.info(f"Found {len(results)} activities with attribute {attr_id}={attr_value}") >> "!TEMP_SCRIPT!"
    echo                     if len(results) > 0:                                         >> "!TEMP_SCRIPT!"
    echo                         logger.info("Semantic attribute query successful")       >> "!TEMP_SCRIPT!"
    echo                     else:                                                        >> "!TEMP_SCRIPT!"
    echo                         logger.warning("Semantic attribute query failed - no results found") >> "!TEMP_SCRIPT!"
    echo.                                                                                 >> "!TEMP_SCRIPT!"
    echo         # 3. Activity type query - find activities by type                       >> "!TEMP_SCRIPT!"
    echo         for activity_type in [StorageActivityType.CREATE, StorageActivityType.MODIFY, StorageActivityType.SHARE]: >> "!TEMP_SCRIPT!"
    echo             aql_query = f"""                                                      >> "!TEMP_SCRIPT!"
    echo             FOR doc IN {collection_name}                                          >> "!TEMP_SCRIPT!"
    echo                 FILTER doc.activity_type == @activity_type                         >> "!TEMP_SCRIPT!"
    echo                 RETURN doc                                                        >> "!TEMP_SCRIPT!"
    echo             """                                                                   >> "!TEMP_SCRIPT!"
    echo.                                                                                 >> "!TEMP_SCRIPT!"
    echo             cursor = db.aql.execute(                                             >> "!TEMP_SCRIPT!"
    echo                 aql_query,                                                        >> "!TEMP_SCRIPT!"
    echo                 bind_vars={"activity_type": activity_type}                         >> "!TEMP_SCRIPT!"
    echo             )                                                                    >> "!TEMP_SCRIPT!"
    echo             results = list(cursor)                                               >> "!TEMP_SCRIPT!"
    echo.                                                                                 >> "!TEMP_SCRIPT!"
    echo             logger.info(f"Found {len(results)} activities of type '{activity_type}'") >> "!TEMP_SCRIPT!"
    echo             if len(results) > 0:                                                 >> "!TEMP_SCRIPT!"
    echo                 logger.info(f"Activity type query successful for {activity_type}") >> "!TEMP_SCRIPT!"
    echo             else:                                                                >> "!TEMP_SCRIPT!"
    echo                 logger.warning(f"Activity type query failed for {activity_type} - no results found") >> "!TEMP_SCRIPT!"
    echo.                                                                                 >> "!TEMP_SCRIPT!"
    echo         # 4. Temporal query - find activities in a date range                    >> "!TEMP_SCRIPT!"
    echo         mid_point = start_time + ((end_time - start_time) / 2)                   >> "!TEMP_SCRIPT!"
    echo.                                                                                 >> "!TEMP_SCRIPT!"
    echo         aql_query = f"""                                                          >> "!TEMP_SCRIPT!"
    echo         FOR doc IN {collection_name}                                              >> "!TEMP_SCRIPT!"
    echo             FILTER doc.timestamp >= @start_date AND doc.timestamp <= @end_date     >> "!TEMP_SCRIPT!"
    echo             RETURN doc                                                            >> "!TEMP_SCRIPT!"
    echo         """                                                                       >> "!TEMP_SCRIPT!"
    echo.                                                                                 >> "!TEMP_SCRIPT!"
    echo         cursor = db.aql.execute(                                                 >> "!TEMP_SCRIPT!"
    echo             aql_query,                                                            >> "!TEMP_SCRIPT!"
    echo             bind_vars={                                                           >> "!TEMP_SCRIPT!"
    echo                 "start_date": start_time.isoformat(),                             >> "!TEMP_SCRIPT!"
    echo                 "end_date": mid_point.isoformat()                                 >> "!TEMP_SCRIPT!"
    echo             }                                                                     >> "!TEMP_SCRIPT!"
    echo         )                                                                        >> "!TEMP_SCRIPT!"
    echo         results = list(cursor)                                                   >> "!TEMP_SCRIPT!"
    echo.                                                                                 >> "!TEMP_SCRIPT!"
    echo         logger.info(f"Found {len(results)} activities in date range")            >> "!TEMP_SCRIPT!"
    echo         if len(results) > 0:                                                     >> "!TEMP_SCRIPT!"
    echo             logger.info("Temporal query successful")                             >> "!TEMP_SCRIPT!"
    echo         else:                                                                    >> "!TEMP_SCRIPT!"
    echo             logger.warning("Temporal query failed - no results found")           >> "!TEMP_SCRIPT!"
    echo.                                                                                 >> "!TEMP_SCRIPT!"
    echo         # Cleanup                                                                >> "!TEMP_SCRIPT!"
    echo         if collection.count() > 0:                                               >> "!TEMP_SCRIPT!"
    echo             logger.info("Cleaning up test data...")                              >> "!TEMP_SCRIPT!"
    echo             collection.truncate()                                                >> "!TEMP_SCRIPT!"
    echo             logger.info("Test data removed")                                     >> "!TEMP_SCRIPT!"
    echo.                                                                                 >> "!TEMP_SCRIPT!"
    echo         logger.info("Cloud storage activity database integration test completed successfully") >> "!TEMP_SCRIPT!"
    echo         return True                                                              >> "!TEMP_SCRIPT!"
    echo.                                                                                 >> "!TEMP_SCRIPT!"
    echo     except Exception as e:                                                       >> "!TEMP_SCRIPT!"
    echo         logger.error(f"Database integration test failed: {e}")                   >> "!TEMP_SCRIPT!"
    echo         return False                                                             >> "!TEMP_SCRIPT!"
    echo.                                                                                 >> "!TEMP_SCRIPT!"
    echo if __name__ == "__main__":                                                       >> "!TEMP_SCRIPT!"
    echo     success = main()                                                             >> "!TEMP_SCRIPT!"
    echo     sys.exit(0 if success else 1)                                               >> "!TEMP_SCRIPT!"
    
    rem Run the cloud storage database integration test
    python "!TEMP_SCRIPT!"
    set DB_TEST_RESULT=!ERRORLEVEL!
    
    rem Remove the temporary file
    del "!TEMP_SCRIPT!"
    
    if !DB_TEST_RESULT!==0 (
        echo Database integration tests passed successfully
    ) else (
        echo Database integration tests failed
    )
) else (
    echo.
    echo Skipping database integration tests. Use -db flag to include them.
    echo Example: run_cloud_storage_tests.bat -db
)

rem Deactivate the virtual environment
if defined VIRTUAL_ENV (
    call deactivate
)

rem Return the unit test result as the exit code
exit /b %UNIT_TEST_RESULT%